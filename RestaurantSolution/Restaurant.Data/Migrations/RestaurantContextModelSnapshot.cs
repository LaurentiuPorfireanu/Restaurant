// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Restaurant.Data.Context;

#nullable disable

namespace Restaurant.Data.Migrations
{
    [DbContext(typeof(RestaurantContext))]
    partial class RestaurantContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Restaurant.Domain.Entities.Alergen", b =>
                {
                    b.Property<int>("AlergenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlergenID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AlergenID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Alergen", (string)null);
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.Menu", b =>
                {
                    b.Property<int>("MenuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("MenuID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.MenuPreparat", b =>
                {
                    b.Property<int>("MenuID")
                        .HasColumnType("int");

                    b.Property<int>("PreparatID")
                        .HasColumnType("int");

                    b.Property<int>("QuantityMenuPortie")
                        .HasColumnType("int");

                    b.HasKey("MenuID", "PreparatID");

                    b.HasIndex("PreparatID");

                    b.ToTable("MenuPreparat", (string)null);
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<decimal>("DeliveryCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("EstimatedDelivery")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("OrderDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("OrderCode")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.OrderDish", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("PreparatID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("OrderID", "PreparatID");

                    b.HasIndex("PreparatID");

                    b.ToTable("OrderDish", (string)null);
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.OrderMenu", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("MenuID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("OrderID", "MenuID");

                    b.HasIndex("MenuID");

                    b.ToTable("OrderMenu", (string)null);
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.Preparat", b =>
                {
                    b.Property<int>("PreparatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PreparatID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Denumire")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("QuantityPortie")
                        .HasColumnType("int");

                    b.Property<int>("QuantityTotal")
                        .HasColumnType("int");

                    b.HasKey("PreparatID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Preparat", (string)null);
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.PreparatAlergen", b =>
                {
                    b.Property<int>("PreparatID")
                        .HasColumnType("int");

                    b.Property<int>("AlergenID")
                        .HasColumnType("int");

                    b.HasKey("PreparatID", "AlergenID");

                    b.HasIndex("AlergenID");

                    b.ToTable("PreparatAlergen", (string)null);
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.PreparatFoto", b =>
                {
                    b.Property<int>("FotoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FotoID"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PreparatID")
                        .HasColumnType("int");

                    b.HasKey("FotoID");

                    b.HasIndex("PreparatID");

                    b.ToTable("PreparatFoto", (string)null);
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.Menu", b =>
                {
                    b.HasOne("Restaurant.Domain.Entities.Category", "Category")
                        .WithMany("Menus")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.MenuPreparat", b =>
                {
                    b.HasOne("Restaurant.Domain.Entities.Menu", "Menu")
                        .WithMany("MenuPreparate")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restaurant.Domain.Entities.Preparat", "Preparat")
                        .WithMany("MenuPreparate")
                        .HasForeignKey("PreparatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Preparat");
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.Order", b =>
                {
                    b.HasOne("Restaurant.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.OrderDish", b =>
                {
                    b.HasOne("Restaurant.Domain.Entities.Order", "Order")
                        .WithMany("OrderDishes")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restaurant.Domain.Entities.Preparat", "Preparat")
                        .WithMany("OrderDishes")
                        .HasForeignKey("PreparatID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Preparat");
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.OrderMenu", b =>
                {
                    b.HasOne("Restaurant.Domain.Entities.Menu", "Menu")
                        .WithMany("OrderMenus")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Restaurant.Domain.Entities.Order", "Order")
                        .WithMany("OrderMenus")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.Preparat", b =>
                {
                    b.HasOne("Restaurant.Domain.Entities.Category", "Category")
                        .WithMany("Preparate")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.PreparatAlergen", b =>
                {
                    b.HasOne("Restaurant.Domain.Entities.Alergen", "Alergen")
                        .WithMany("PreparatAlergens")
                        .HasForeignKey("AlergenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restaurant.Domain.Entities.Preparat", "Preparat")
                        .WithMany("PreparatAlergens")
                        .HasForeignKey("PreparatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alergen");

                    b.Navigation("Preparat");
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.PreparatFoto", b =>
                {
                    b.HasOne("Restaurant.Domain.Entities.Preparat", "Preparat")
                        .WithMany("Fotos")
                        .HasForeignKey("PreparatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Preparat");
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.Alergen", b =>
                {
                    b.Navigation("PreparatAlergens");
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.Category", b =>
                {
                    b.Navigation("Menus");

                    b.Navigation("Preparate");
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.Menu", b =>
                {
                    b.Navigation("MenuPreparate");

                    b.Navigation("OrderMenus");
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDishes");

                    b.Navigation("OrderMenus");
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.Preparat", b =>
                {
                    b.Navigation("Fotos");

                    b.Navigation("MenuPreparate");

                    b.Navigation("OrderDishes");

                    b.Navigation("PreparatAlergens");
                });

            modelBuilder.Entity("Restaurant.Domain.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
